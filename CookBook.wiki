#summary Solutions for more complex Minify configurations
#labels Phase-Deploy,Featured

Unless mentioned, all the following snippets go in `min/config.php`.

== Faster Cache Performance ==

By default, Minify uses [http://code.google.com/p/minify/source/browse/tags/release_2.1.3/min/lib/Minify/Cache/File.php Minify_Cache_File]. It uses `readfile`/`fpassthru` to improve performance over most file-based systems, but it's still file IO. I haven't done comparative benchmarks on all three, but APC/Memcache _should_ be faster. In all cases, Minify cache ids begin with `"minify_"`.

=== APC ===

{{{
require 'lib/Minify/Cache/APC.php';
$min_cachePath = new Minify_Cache_APC();
}}}

=== Memcache ===

You must create and connect your Memcache object then pass it to `Minify_Cache_Memcache`'s constructor.
{{{
require 'lib/Minify/Cache/Memcache.php';
$memcache = new Memcache;
$memcache->connect('localhost', 11211);
$min_cachePath = new Minify_Cache_Memcache($memcache);
}}}

== YUICompressor ==

If your host can execute Java, you can use Minify's YUI Compressor wrapper. You'll need the latest [http://yuilibrary.com/downloads/#yuicompressor yuicompressor-x.x.x.jar] and a temp directory. Place the .jar in `min/lib`, then:
{{{
function yuiJs($js) {
    require_once 'Minify/YUICompressor.php'; 
    Minify_YUICompressor::$jarFile = dirname(__FILE__) . '/lib/yuicompressor-x.x.x.jar'; 
    Minify_YUICompressor::$tempDir = '/tmp'; 
    return Minify_YUICompressor::minifyJs($js); 
}
$min_serveOptions['minifiers']['application/x-javascript'] = 'yuiJs';
}}}

To use YUIC for CSS with fixed URIs:

{{{
function yuiCss($css, $options) {
    require_once 'Minify/YUICompressor.php';
    Minify_YUICompressor::$jarFile = dirname(__FILE__) . '/lib/yuicompressor-2.4.2.jar';
    Minify_YUICompressor::$tempDir = dirname(__FILE__) . '/tmp';
    $css = Minify_YUICompressor::minifyCss($css);
    
    require_once 'Minify/CSS/UriRewriter.php';
    $css = Minify_CSS_UriRewriter::rewrite(
        $css
        ,$options['currentDir']
        ,isset($options['docRoot']) ? $options['docRoot'] : $_SERVER['DOCUMENT_ROOT']
        ,isset($options['symlinks']) ? $options['symlinks'] : array()
    );
    return $css;
}
$min_serveOptions['minifiers']['text/css'] = 'yuiCss';
}}}

== JSMin+ ==

Minify 2.1.3 comes with Tino Zijdel's [http://crisp.tweakblogs.net/blog/1665/a-new-javascript-minifier-jsmin+.html JSMin+] 1.1. This is a full parser based on a port of [http://en.wikipedia.org/wiki/Narcissus_(JavaScript_engine) Narcissus]. To try it out:
{{{
$min_serveOptions['minifiers']['application/x-javascript'] = array('JSMinPlus', 'minify');
}}}
This should yield smaller javascript files, but I've tested this only briefly. For production you may want to get the [http://crisp.tweakblogs.net/blog/cat/716 latest version] (you must rename it: `min/lib/JSMinPlus.php`).

Note: JSMin+ is memory intensive, so be prepared to up your memory limit. Also it has no [http://code.google.com/p/minify/source/browse/tags/release_2.1.3/min/lib/JSMin.php#10 comment preservation] as of 1.3, in case you rely on this.

== Server-specific Options ==

You may need to have different options depending on what server you're on. You can do this just how you'd expect:
{{{
if ($_SERVER['SERVER_NAME'] == 'myTestingWorkstation') {
    // testing
    $min_allowDebugFlag = true;
    $min_errorLogger    = true;
    $min_enableBuilder  = true;
    $min_cachePath      = 'c:\\WINDOWS\\Temp';
    $min_serveOptions['maxAge'] = 0; // see changes immediately
} else {
    // production
    $min_allowDebugFlag = false;
    $min_errorLogger    = false;
    $min_enableBuilder  = false;
    $min_cachePath      = '/tmp';
    $min_serveOptions['maxAge'] = 86400;
}
}}}

== Site in a Subdirectory ==

If you test/develop sites in a subdirectory (e.g. `http://localhost/siteA/`), see AlternateFileLayouts.

== Group-specific Options ==

In "group" requests, `$_GET['g']` holds the group key, so you can code based on it:
{{{
if (isset($_GET['g'])) {
    switch ($_GET['g']) {
    case 'js' : $min_serveOptions['maxAge'] = 86400 * 7;
                break;
    case 'css': $min_serveOptions['contentTypeCharset'] = 'iso-8859-1';
                break;
    }
}
}}}

== File/Source-specific Options ==

See CustomSource.

== Processing Output After Minification ==

If `$min_serveOptions['postprocessor']` is set to a callback, Minify will pass the minified content to this function with type as the second argument. This allows you to apply changes to your minified content without making your own custom minifier. E.g.:
{{{
function postProcess($content, $type) {
    if ($type === Minify::TYPE_CSS) {    
        require_once 'CssColorReplacer.php';
        return CssColorReplacer::process($content);
    }
    return $content;
}
$min_serveOptions['postprocessor'] = 'postProcess';
}}}
This function is only called once immediately after minification and its output is stored in the cache.