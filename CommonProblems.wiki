#summary Common Problems using Minify
#labels Featured,Phase-Support

== @imports can appear in invalid locations in combined CSS files ==

If you combine CSS files, @import declarations can appear after CSS rules, invalidating the stylesheet. As of version 2.1.2, if Minify detects this, it will prepend a warning to the output CSS file. To resolve this, you can either move your @import statements within your files, or enable the option 'bubbleCssImports'.

== URIs are re-written incorrectly in CSS output ==

  * As these settings are complex, *please troubleshoot problems on the [http://groups.google.com/group/minify minify mailing list] before filing an issue.* Please include the following when posting or creating an issue: 
    # complete file path of the DOCUMENT_ROOT
    # complete file path of the CSS source file
    # the `$min_symlink` setting (if used)
    # the original and output URIs
  * Check that DOCUMENT_ROOT is a real directory path. If `$_SERVER['DOCUMENT_ROOT']` is invalid, e.g. contains a trailing slash "/", or points to a path that doesn't exist, URI rewriting may fail. If you cannot fix this in httpd.conf, etc., use the [http://code.google.com/p/minify/source/browse/trunk/min/config.php?r=292#47 configuration option].
  * If your CSS source file is in a symlink-ed directory (e.g. not within DOCUMENT_ROOT), you will have to use the [http://code.google.com/p/minify/source/browse/trunk/min/config.php?r=292#114 $min_symlinks] option.

== Debug mode can cause a Javascript error ==

This issue was resolved in version 2.1.2.

Debug mode adds line numbers in comments. Unfortunately, in versions <= 2.1.1, if the source file had a string or regex containing (what looks like) a C-style comment token, the algorithm was confused and the injected comments caused a syntax error.

== Minification can cause a Javascript error ==

This issue was resolved in version 2.1.2.

In rare instances the [http://code.google.com/p/minify/source/browse/tags/release_2.1.1/min/lib/JSMin.php#14 JSMin] algorithm in versions <= 2.1.1 could be confused by regexes in certain contexts and throw an exception. The workaround was to simply wrap the expression in parenthesis. E.g.
{{{
return /'/;   // JSMin in 2.1.1 throws error

return (/'/); // no error
}}}